plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.blooming'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Gradle 설정 그룹 정의
configurations {
    compileOnly {
        extendsFrom annotationProcessor  // Lombok 등의 애노테이션 프로세서 설정
    }
}

// 의존성을 가져올 저장소 설정
repositories {
    mavenCentral()  // Maven Central Repository 사용
}

dependencies {
    // Spring Boot 핵심 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // 개발 도구 및 유틸리티
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'  // 롬복 애노테이션 처리

    // 테스트 관련 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 데이터베이스 관련 의존성
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.5'

    // 테스트용 임베디드 데이터베이스
    testImplementation 'com.github.codemonstur:embedded-redis:1.4.3'  // 테스트용 Redis
    testRuntimeOnly 'com.h2database:h2'  // 테스트용 H2 데이터베이스

    // QueryDsl, spring boot 3.x 이상 세팅
    implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
    annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // AWS
    implementation 'software.amazon.awssdk:s3:2.20.0'
    implementation 'software.amazon.awssdk:auth:2.20.0'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'
}

// 테스트 태스크 설정
tasks.named('test', Test) {
    useJUnitPlatform()  // JUnit 5 사용
}

// QueryDsl 빌드 옵션 (선택)
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(file(querydslDir))
}

clean.doLast {
    delete querydslDir
}

bootJar {
    archiveFileName = 'inpeak-backend.jar'
}
